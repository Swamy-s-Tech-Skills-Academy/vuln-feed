using Microsoft.EntityFrameworkCore;
using VulnFeed.Web.Domain.Entities;
using VulnFeed.Web.Persistence;

namespace VulnFeed.Web.Domain.Interfaces.Repositories;

public class VulnerabilityFeedRepository(VulnFeedDbContext context, ILogger<VulnerabilityFeedRepository> logger) : IVulnerabilityFeedRepository
{
    private readonly VulnFeedDbContext _context = context ?? throw new ArgumentNullException(nameof(context));
    private readonly ILogger<VulnerabilityFeedRepository> _logger = logger ?? throw new ArgumentNullException(nameof(logger));

    public async Task<Vulnerability> AddOrUpdateVulnerability(Vulnerability vulnerability)
    {
        var existingVulnerability = await _context.Vulnerabilities
                .Include(v => v.VulnerableComponentSummaries)
                .Where(v => v.CveId == vulnerability.CveId)
                .FirstOrDefaultAsync();

        var existingComponents = await FindComponentsMapByCpe(vulnerability.VulnerableComponentSummaries.Select(c => c.Component.ComponentCpe));
        var (vulnerabilityEntity, vulnerabilityAdded) = await UpsertVulnerability(existingVulnerability, vulnerability);
        await UpsertSummaries(vulnerabilityEntity, existingComponents, vulnerability.VulnerableComponentSummaries.ToList(), vulnerabilityAdded);

        await _context.SaveChangesAsync();
        return vulnerabilityEntity;
    }

    private async Task<Dictionary<string, Component>> FindComponentsMapByCpe(IEnumerable<string> cpes)
    {
        return await _context.Components
            .Where(c => cpes.Contains(c.ComponentCpe))
            .ToDictionaryAsync(c => c.ComponentCpe, c => c);
    }

    private (Component component, bool added) UpsertComponent(Dictionary<string, Component> existingComponents, Component component)
    {
        Component newOrUpdatedComponent = existingComponents.TryGetValue(component.ComponentCpe, out var existingComponent)
            ? existingComponent
            : new Component();

        var add = existingComponent == null;
        newOrUpdatedComponent.ComponentCpe = component.ComponentCpe;
        newOrUpdatedComponent.ComponentName = component.ComponentName;

        if (add)
        {
            existingComponents.Add(newOrUpdatedComponent.ComponentCpe, newOrUpdatedComponent);
            _context.Add(newOrUpdatedComponent);
        }

        return (newOrUpdatedComponent, add);
    }

    private async Task UpsertSummaries(Vulnerability vulnerability, Dictionary<string, Component> existingComponents, IEnumerable<VulnerableComponentSummary> summaries, bool newVulnerability)
    {
        foreach (var summary in summaries)
        {
            var (component, componentAdded) = UpsertComponent(existingComponents, summary.Component);

            await _context.SaveChangesAsync();

            if (componentAdded || newVulnerability)
            {
                _context.VulnerableComponentSummaries.Add(new VulnerableComponentSummary()
                {
                    ComponentId = component.ComponentId,
                    VulnerabilityId = vulnerability.VulnerabilityId,
                    LatestVulnerableVersionName = summary.LatestVulnerableVersionName,
                    VulnerableVersionCount = summary.VulnerableVersionCount
                });
            }
        }

        await _context.SaveChangesAsync();
    }

    private async Task<(Vulnerability vulnerability, bool added)> UpsertVulnerability(Vulnerability? existingVulnerability, Vulnerability vuln)
    {
        var vulnerability = existingVulnerability ?? new Vulnerability();
        var add = existingVulnerability == null;

        vulnerability.CveId = vuln.CveId;
        vulnerability.Description = vuln.Description;
        vulnerability.ScoreCvss3 = vuln.ScoreCvss3;
        vulnerability.SeverityCvss3 = vuln.SeverityCvss3;
        vulnerability.ScoreCvss2 = vuln.ScoreCvss2;
        vulnerability.SeverityCvss2 = vuln.SeverityCvss2;

        if (add)
        {
            _context.Add(vulnerability);
        }

        await _context.SaveChangesAsync();
        return (vulnerability, add);
    }
}
