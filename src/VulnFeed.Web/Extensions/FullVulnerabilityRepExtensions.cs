using VulnFeed.Web.Domain.Entities;
using VulnFeed.Web.Endpoints;
using VulnFeed.Web.Representations;

namespace VulnFeed.Web.Extensions;

public static class FullVulnerabilityRepExtensions
{
    public static FullVulnerabilityRep FromDomain(this Vulnerability vuln, VulnerabilityFeedEndpoints endpoints)
    {
        return new FullVulnerabilityRep(
            vuln.CveId,
            vuln.Description,
            vuln.ScoreCvss3,
            vuln.SeverityCvss3,
            vuln.ScoreCvss2,
            vuln.SeverityCvss2,
            new List<ComponentVersionRep>(),
            endpoints.GetVulnerabilityLocation(vuln.VulnerabilityId));
    }

    public static Vulnerability ToVulnerability(this FullVulnerabilityRep rep, long? vulnerabilityId = null)
    {
        return new Vulnerability
        {
            VulnerabilityId = vulnerabilityId ?? default,
            CveId = rep.CveId,
            Description = rep.Description,
            ScoreCvss3 = rep.ScoreCvssV3,
            SeverityCvss3 = rep.SeverityCvssV3,
            ScoreCvss2 = rep.ScoreCvssV2,
            SeverityCvss2 = rep.SeverityCvssV2,
            VulnerableComponentSummaries = SummarizeVulnerableComponent(rep.AffectedVersions)
        };
    }

    private static List<VulnerableComponentSummary> SummarizeVulnerableComponent(List<ComponentVersionRep> componentVersion)
    {
        var summaries = componentVersion.GroupBy(
            v => new SummaryKey(v.ComponentName, v.ComponentCpe),
            v => v.VersionName,
            (key, versions) =>
            {
                var list = versions.OrderByDescending(v => v).ToList();

                return new VulnerableComponentSummary
                {
                    Component = new Component
                    {
                        ComponentName = key.ComponentName,
                        ComponentCpe = key.ComponentCpe
                    },
                    LatestVulnerableVersionName = list.First(),
                    VulnerableVersionCount = list.Count
                };
            }).ToList();

        return summaries;
    }

    private record SummaryKey(string? ComponentName, string ComponentCpe);
}
